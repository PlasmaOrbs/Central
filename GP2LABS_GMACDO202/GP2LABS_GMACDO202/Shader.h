#ifndef Shader_h
#define Shader_h

#include <GL/glew.h>

#ifdef WIN32
#include <SDL_opengl.h>
#elif __APPLE__
#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>
#endif

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

///////////////////////////////////////////////////////////

/* Defines shader type we are going to compile

   "Made Up* we use this so we can use the same function
   to compile different types of shaders 
   
   Maps our enum to OpenGL for cross platform development */
enum SHADER_TYPE
{
	VERTEX_SHADER = GL_VERTEX_SHADER,
	FRAGMENT_SHADER = GL_FRAGMENT_SHADER
};

///////////////////////////////////////////////////////////

/* This function returns GLuint which is the ID of the loaded shader
   -if unsuccessful returns value will be 0

   First parameter character array to hold (SHADER_SOURCE_CODE) 
   (Loaded from files or just defined as global character array)
   
   second parameter is the type of shader we are attempting to
   load using enums*/
GLuint loadShaderFromMemory(const char * pMem, SHADER_TYPE shaderType);

/* Same as loadShaderFromMemory function but instead takes a string*/
GLuint loadShaderFromFile(const string& strFileName, SHADER_TYPE enumShaderType);

bool checkForLinkErrors(GLuint gluiProgram);

//Check any errors that have been generated by compiled shader
bool checkForCompilerErrors(GLuint shaderProgram);

///////////////////////////////////////////////////////////

#endif